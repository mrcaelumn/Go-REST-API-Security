// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "go-rest-security": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/mrcaelumn/Go-REST-API-Security/api/design
// --out=$(GOPATH)/src/github.com/mrcaelumn/Go-REST-API-Security/api
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// GetTokenActionContext provides the Action getToken action context.
type GetTokenActionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewGetTokenActionContext parses the incoming request URL and body, performs validations and creates the
// context used by the Action controller getToken action.
func NewGetTokenActionContext(ctx context.Context, r *http.Request, service *goa.Service) (*GetTokenActionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := GetTokenActionContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *GetTokenActionContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *GetTokenActionContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *GetTokenActionContext) BadRequest(r *GorestsecurityError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *GetTokenActionContext) Unauthorized(r *GorestsecurityError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *GetTokenActionContext) Forbidden(r *GorestsecurityError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *GetTokenActionContext) InternalServerError(r *GorestsecurityError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// RequestActionContext provides the Action request action context.
type RequestActionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewRequestActionContext parses the incoming request URL and body, performs validations and creates the
// context used by the Action controller request action.
func NewRequestActionContext(ctx context.Context, r *http.Request, service *goa.Service) (*RequestActionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RequestActionContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RequestActionContext) OK(resp []byte) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	ctx.ResponseData.WriteHeader(200)
	_, err := ctx.ResponseData.Write(resp)
	return err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *RequestActionContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RequestActionContext) BadRequest(r *GorestsecurityError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *RequestActionContext) Unauthorized(r *GorestsecurityError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 401, r)
}

// Forbidden sends a HTTP response with status code 403.
func (ctx *RequestActionContext) Forbidden(r *GorestsecurityError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 403, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *RequestActionContext) InternalServerError(r *GorestsecurityError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// VersionVersionContext provides the version version action context.
type VersionVersionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewVersionVersionContext parses the incoming request URL and body, performs validations and creates the
// context used by the version controller version action.
func NewVersionVersionContext(ctx context.Context, r *http.Request, service *goa.Service) (*VersionVersionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := VersionVersionContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *VersionVersionContext) OK(r *GorestsecurityVersion) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}
