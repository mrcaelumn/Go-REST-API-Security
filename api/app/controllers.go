// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "go-rest-security": Application Controllers
//
// Command:
// $ goagen
// --design=github.com/mrcaelumn/Go-REST-API-Security/api/design
// --out=$(GOPATH)/src/github.com/mrcaelumn/Go-REST-API-Security/api
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"github.com/goadesign/goa/cors"
	"net/http"
)

// initService sets up the service encoders, decoders and mux.
func initService(service *goa.Service) {
	// Setup encoders and decoders
	service.Encoder.Register(goa.NewJSONEncoder, "application/json")
	service.Decoder.Register(goa.NewJSONDecoder, "application/json")

	// Setup default encoder and decoder
	service.Encoder.Register(goa.NewJSONEncoder, "*/*")
	service.Decoder.Register(goa.NewJSONDecoder, "*/*")
}

// ActionController is the controller interface for the Action actions.
type ActionController interface {
	goa.Muxer
	GetToken(*GetTokenActionContext) error
	Request(*RequestActionContext) error
}

// MountActionController "mounts" a Action resource controller on the given service.
func MountActionController(service *goa.Service, ctrl ActionController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewGetTokenActionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.GetToken(rctx)
	}
	service.Mux.Handle("GET", "/gorestsecurity/getToken", ctrl.MuxHandler("getToken", h, nil))
	service.LogInfo("mount", "ctrl", "Action", "action", "GetToken", "route", "GET /gorestsecurity/getToken")

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewRequestActionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Request(rctx)
	}
	service.Mux.Handle("GET", "/gorestsecurity/request", ctrl.MuxHandler("request", h, nil))
	service.LogInfo("mount", "ctrl", "Action", "action", "Request", "route", "GET /gorestsecurity/request")
}

// SwaggerController is the controller interface for the Swagger actions.
type SwaggerController interface {
	goa.Muxer
	goa.FileServer
}

// MountSwaggerController "mounts" a Swagger resource controller on the given service.
func MountSwaggerController(service *goa.Service, ctrl SwaggerController) {
	initService(service)
	var h goa.Handler
	service.Mux.Handle("OPTIONS", "/swagger.json", ctrl.MuxHandler("preflight", handleSwaggerOrigin(cors.HandlePreflight()), nil))

	h = ctrl.FileHandler("/swagger.json", "api/swagger/swagger.json")
	h = handleSwaggerOrigin(h)
	service.Mux.Handle("GET", "/swagger.json", ctrl.MuxHandler("serve", h, nil))
	service.LogInfo("mount", "ctrl", "Swagger", "files", "api/swagger/swagger.json", "route", "GET /swagger.json")
}

// handleSwaggerOrigin applies the CORS response headers corresponding to the origin.
func handleSwaggerOrigin(h goa.Handler) goa.Handler {

	return func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		origin := req.Header.Get("Origin")
		if origin == "" {
			// Not a CORS request
			return h(ctx, rw, req)
		}
		if cors.MatchOrigin(origin, "*") {
			ctx = goa.WithLogContext(ctx, "origin", origin)
			rw.Header().Set("Access-Control-Allow-Origin", origin)
			rw.Header().Set("Access-Control-Allow-Credentials", "false")
			if acrm := req.Header.Get("Access-Control-Request-Method"); acrm != "" {
				// We are handling a preflight request
				rw.Header().Set("Access-Control-Allow-Methods", "GET")
			}
			return h(ctx, rw, req)
		}

		return h(ctx, rw, req)
	}
}

// VersionController is the controller interface for the Version actions.
type VersionController interface {
	goa.Muxer
	Version(*VersionVersionContext) error
}

// MountVersionController "mounts" a Version resource controller on the given service.
func MountVersionController(service *goa.Service, ctrl VersionController) {
	initService(service)
	var h goa.Handler

	h = func(ctx context.Context, rw http.ResponseWriter, req *http.Request) error {
		// Check if there was an error loading the request
		if err := goa.ContextError(ctx); err != nil {
			return err
		}
		// Build the context
		rctx, err := NewVersionVersionContext(ctx, req, service)
		if err != nil {
			return err
		}
		return ctrl.Version(rctx)
	}
	service.Mux.Handle("GET", "/gorestsecurity/version", ctrl.MuxHandler("version", h, nil))
	service.LogInfo("mount", "ctrl", "Version", "action", "Version", "route", "GET /gorestsecurity/version")
}
